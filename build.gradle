/*
 * GNU General Public License version 2
 *
 * Copyright (C) 2019-2020 JetBrains s.r.o.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */
plugins {
  id("org.jetbrains.kotlin.jvm")
  id("application")
}

repositories {
  mavenCentral()
  maven { setUrl("https://jitpack.io") }
}

mainClassName = "org.jetbrains.projector.demo.OriginalMain"

group = "com.intellij"
version = "1.0-SNAPSHOT"

configurations {
  jarOriginal
}

compileKotlin {
  kotlinOptions {
    jvmTarget = targetJvm
    includeRuntime = true
    noStdlib = false
  }
}

configurations.all {
  // disable caching of -SNAPSHOT dependencies
  resolutionStrategy.cacheChangingModulesFor(0, "seconds")
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
  implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
  implementation "com.github.JetBrains.projector-server:projector-server:$projectorServerVersion"

  jarOriginal "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
  jarOriginal "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
}

def inline = { deps -> deps.collect { it.isDirectory() ? it : zipTree(it) } }

task jarOriginal(type: Jar) {
  manifest {
    attributes(
      "Main-Class": "org.jetbrains.projector.demo.OriginalMain",
      )
  }

  exclude("META-INF/versions/9/module-info.class")

  baseName = project.name + '-original'

  from {
    inline(configurations.jarOriginal)
  }

  with jar
}

task jarHeadlessSupport(type: Jar) {
  manifest {
    attributes(
      "Main-Class": "org.jetbrains.projector.demo.HeadlessSupportingMain",
      )
  }

  exclude("META-INF/versions/9/module-info.class")

  baseName = project.name + '-headless-support'

  from {
    inline(configurations.runtimeClasspath)
  }

  with jar
}
